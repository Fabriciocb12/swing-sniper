# ‚úÖ SWING SNIPER GPT BOT (Full Notebook)

!pip install yfinance ta openai --quiet

import yfinance as yf
import pandas as pd
import ta
from openai import OpenAI
import smtplib
from email.mime.text import MIMEText

# ‚úÖ Email Settings
EMAIL_SENDER = "EMAIL_SENDER"
EMAIL_PASSWORD = "EMAIL_PASSWORD"  # <- Gmail App Password
EMAIL_RECEIVER = "EMAIL_RECEIVER"

def send_email(subject, body):
    try:
        msg = MIMEText(body)
        msg["Subject"] = subject
        msg["From"] = EMAIL_SENDER
        msg["To"] = EMAIL_RECEIVER

        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(EMAIL_SENDER, EMAIL_PASSWORD)
            server.sendmail(EMAIL_SENDER, EMAIL_RECEIVER, msg.as_string())
        print("‚úÖ Email sent.")
    except Exception as e:
        print("‚ö†Ô∏è Email failed:", e)

# üîë Your OpenAI API Key
client = OpenAI(api_key="OPENAI_API_KEY")

# üîç Tickers to scan
tickers = [
    # üîπ Growth Stocks
    "AAPL", "TSLA", "NVDA", "AMD", "MSFT", "AMZN", "GOOGL", "META", "NFLX", "SHOP",

    # üî∏ Value/Defensive
    "WMT", "PEP", "KO", "CVS", "JNJ", "PG", "XOM", "VZ", "O",

    # üü° Dividend ETFs
    "JEPQ", "JEPI", "RYLD", "QYLD", "SCHD", "VYM", "DVY", "HDV",

    # üü¢ Growth & Index ETFs
    "QQQ", "SPY", "VOO", "IWM", "ARKK", "TLT", "XLF", "XLE", "XLV", "XLC",

    # üü† International Exposure
    "EWZ", "EEM", "FXI", "EWJ", "IBB",

    # üü£ Crypto
    "BTC-USD", "ETH-USD", "SOL-USD", "DOGE-USD", "BNB-USD", "AVAX-USD",

    # üîµ Commodities
    "GLD", "SLV", "USO", "UNG", "DBA", "DBC", "PALL"
]

high_confidence_trades = []

for ticker in tickers:
    try:
        print(f"üîç Scanning {ticker}...")
        data = yf.download(ticker, period="3mo", interval="1d", auto_adjust=True)
        print("üìä Raw columns returned:", data.columns.tolist())
        print(data.tail(1))

        if isinstance(data.columns, pd.MultiIndex):
            data.columns = [col[0] for col in data.columns]

        data.rename(columns=lambda x: str(x).capitalize(), inplace=True)

        required_cols = ['Open', 'High', 'Low', 'Close', 'Volume']
        if not all(col in data.columns for col in required_cols):
            print(f"‚ö†Ô∏è {ticker} still missing expected columns. Skipping.")
            continue

        data = ta.add_all_ta_features(
            data,
            open="Open", high="High", low="Low", close="Close", volume="Volume",
            fillna=True
        )

        latest = data.iloc[-1]
        rsi = latest["momentum_rsi"]
        stochrsi = latest["momentum_stoch_rsi"]
        macd = latest["trend_macd"]
        macd_signal = latest["trend_macd_signal"]
        macd_hist = macd - macd_signal
        ma20 = latest["trend_sma_fast"]
        ma150 = latest["trend_sma_slow"]
        close = latest["Close"]
        bbm = latest["volatility_bbm"]
        bbw = latest["volatility_bbw"]
        bb_low = bbm - bbw
        volume = latest["Volume"]
        avg_volume = data["Volume"].rolling(window=20).mean().iloc[-1]
        adx = latest["trend_adx"]

        if (
            rsi < 35 and
            stochrsi < 0.2 and
            macd > macd_signal and
            macd_hist > 0 and
            close > ma150 and close < ma20 and
            close <= bb_low and
            volume > avg_volume and
            adx > 20
        ):
            high_confidence_trades.append({
                "ticker": ticker,
                "rsi": round(rsi, 2),
                "stochrsi": round(stochrsi, 2),
                "macd_hist": round(macd_hist, 3),
                "close": round(close, 2),
                "ma20": round(ma20, 2),
                "ma150": round(ma150, 2),
                "volume": round(volume),
                "avg_volume": round(avg_volume),
                "adx": round(adx, 2)
            })

    except Exception as e:
        print(f"‚ö†Ô∏è Error with {ticker}: {e}")

# üìà Show results
if not high_confidence_trades:
    print("\n‚ùå No trade meets the 80‚Äì90% confidence criteria. Try again later.")
else:
    print("\n‚úÖ High-confidence trade setup(s) found!")
    for trade in high_confidence_trades:
        print(f"\nüìä Ticker: {trade['ticker']}")
        for key, value in trade.items():
            if key != "ticker":
                print(f"{key.upper()}: {value}")

        # GPT Recommendation
        prompt = f"""
        You are an expert swing trader. Given the following data, write a 3-4 sentence recommendation:
        - Ticker: {trade['ticker']}
        - RSI: {trade['rsi']}
        - Stochastic RSI: {trade['stochrsi']}
        - MACD Histogram: {trade['macd_hist']}
        - Close: {trade['close']}
        - MA20: {trade['ma20']}
        - MA150: {trade['ma150']}
        - Volume: {trade['volume']} vs avg {trade['avg_volume']}
        - ADX: {trade['adx']}

        Include:
        - Confidence level from 0% to 100%
        - Suggested entry price (around close)
        - Suggested target price
        - Suggested stop loss
        - Why this trade is attractive
        """

        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            print("\nüß† GPT Recommendation:")
            print(response.choices[0].message.content)

            # ‚úÖ EMAIL ALERT HERE
            email_body = f"üìä Trade Alert: {trade['ticker']}\n" + response.choices[0].message.content
            send_email(f"üîî SniperBot Signal: {trade['ticker']}", email_body)

        except Exception as e:
            print("‚ö†Ô∏è GPT Error:", e)

print("\n‚úÖ Scanner complete. You may now close or check results above.")

# ‚úÖ PHASE 3.3: GPT SECTOR + SENTIMENT SNAPSHOT
print("\nüß† Running GPT Sector Sentiment Analysis...")

sector_prompt = """
Act as a financial analyst. Evaluate current macroeconomic trends and sector outlooks for swing traders. 
Assess likely strength/weakness across these sectors based on news, economic indicators, and seasonality:
- Technology
- Healthcare
- Financials
- Energy
- Consumer Staples
- Consumer Discretionary
- Communication Services
- Industrials
- Real Estate
- Materials
- Utilities
- Crypto
- Commodities

For each sector, write 1 sentence with current strength (+, -, or ~) and brief reasoning.
Then give a 4-line summary of the best opportunities.
"""

try:
    sector_response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": sector_prompt}]
    )
    summary = sector_response.choices[0].message.content
    print("\nüìà GPT Sector Summary:\n", summary)

    # Optional: Email the analysis too
    send_email("üß† GPT Sector Snapshot", summary)

except Exception as e:
    print("‚ö†Ô∏è Sector analysis GPT failed:", e)